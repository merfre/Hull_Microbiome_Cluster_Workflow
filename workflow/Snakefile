### Analysis workflow for preprocessing, taxonomy assignment, and antimicrobial resistance identification - for Hull Microbiome Cluster ###

configfile: "config/config.yaml"

###### To do:
# Assembly assessment - metaquast?
# Add messages and remove printing?
# Add logs to rules 
# Test directory for repo
#**add metabat2
#**test 
#**batch scripts
#**Make pig host reference (ideally a script to send to michelle if she needs)
#tell everyone to update

### Define samples wildcard for input and output ###

print("Importing Python modules...")

import pandas as pd
import os
import fileinput
import glob

print("Loading metadata and creating wildcards...\n\n")

metadata = config['metadata_file']

sample_df = pd.read_table(metadata, header=0)

# ok the sampleID doesn't have to change you just need to add a column titled Barcode 
# Then here if rename_samples is true I need to rename the fastq files using python
# the concatonating script is a good outline for this - I get the barcode fastq path
# then I need to rename this file to the new sample ID plus path after that it should
# be business as usual - I don't need to change the metadata file in this script
# For testing: just do false and have a regular test run of my changes so far
# then to test this code I add a column (to rename example) and run it

# Option to rename barcode fastqs to provided sample IDs

#if config['rename_samples'] == True:
#  for row in range(len(sample_df)):
#    barcode = sample_df.loc[row,'Barcode']
#    run = sample_df.loc[row,'Run']
#    sample = sample_df.loc[row,'Sample_ID']
#    bar_path = str().join('./resources/'+run+'/'+barcode+'.fastq')
#    new_path = str().join('./resources/'+run+'/'+sample+'.fastq')
#    os.rename(bar_path,new_path)

# Retrieve path of fastq files

sample_df['Path'] = None

for row in range(len(sample_df)):
    sample = sample_df.loc[row,'Sample_ID']
    run = sample_df.loc[row,'Run']
    path = str().join(run+'/'+sample)
    sample_df.loc[row,'Path'] = path

sample_df.to_csv(metadata, sep="\t", index=True)

SAMPLES = list(sample_df['Sample_ID'])
PATHS = list(sample_df['Path'])
RUNS = list(sample_df['Run'])

wildcard_constraints:
  PATHS=".*\/.*",
  SAMPLES = "[^\/]+",
  RUNS = "[^\/]+"

### Optional analyses ###

optional_outputs = list()

# Host removal option
if config['include_host_removal'] == True:
  optional_outputs.extend(["results/qc_reports/hostrm_qc_report.tsv"])

# Assembly option
if config['include_assembly'] == True:
  optional_outputs.extend(["results/qc_reports/assembly_stat_report.tsv", "results/biom/kraken2_assem_allsamples.tsv",
  expand("results/biom/{path}_assem_kraken2.tsv", path=PATHS),"results/downstream/alpha_div_table_assem.tsv",
  "results/downstream/beta_pca_assem.pdf"])
else:
  optional_outputs.extend(["results/biom/kraken2_unassem_allsamples.tsv", expand("results/biom/{path}_unassem_kraken2.tsv", path=PATHS),
  "results/downstream/alpha_div_table_unassem.tsv","results/downstream/beta_pca_unassem.pdf"])

### Target rule ###

print("Running Hull Microbiome Cluster Workflow...\n\n")

rule all:
    input:
        "results/qc_reports/pre_qc_report.tsv",
        "results/qc_reports/post_qc_report.tsv",
        optional_outputs = optional_outputs,

### Remaining rules for workflow ###

# 1. Filter based on size and quality
include: "rules/fastp.smk"

# 2. Convert files to fasta with or without host sequences removed
if config['include_host_removal'] == True:

  include: "rules/removing_host_seq.smk"

  include: "rules/fasta_conversion_hostrm.smk"

  print("Host contamination removal will be performed using minimap2 and samtools\n")

else:

  include: "rules/fasta_conversion_hostinc.smk"

  print("Host sequences will not be removed\n")

# 3. Assign taxonomy and convert to/from biom with or without read assembly
if config['include_assembly'] == True:

  include: "rules/metaflye.smk"

  include: "rules/kraken2_assem.smk"

  include: "rules/biom_individual_assem.smk" # convert kraken2 results to tabular format for R for individual samples

  include: "rules/biom_all_samples_assem.smk" # convert kraken2 results to tabular format for R for all samples

  include: "rules/downstream_analysis_assem.smk"

  print("Read assembly will be performed by metaFlye and analyses will be performed as normal\n")

else:
    
  include: "rules/kraken2_unassem.smk"

  include: "rules/biom_individual_unassem.smk" # convert kraken2 results to tabular format for R for individual samples

  include: "rules/biom_all_samples_unassem.smk" # convert kraken2 results to tabular format for R for all samples

  include: "rules/downstream_analysis_unassem.smk"

  print("metaFlye for read assembly will not be included and analyses will be performed as normal\n")

# 4. Report creation
report: "rules/report/workflow.rst"
