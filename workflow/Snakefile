### Analysis workflow for preprocessing, taxonomy assignment, and antimicrobial resistance identification - for Hull Microbiome Cluster ###

configfile: "config/config.yaml"

###### To do:
# *Split into either assemble or don't - not both
# Assembly assessment - quast?
# Kraken2 for contigs and biom! 
# *Remove contaminents script for snehal
# *Downstream analyses scripts - just general from mmcaw
#     diversity scores, alpha and beta, tax barplot, species 
#     heatmap?
# Add messages and remove printing??
# Add logs to rules 
# Test directory for repo
# * = new analysis option

### Define samples wildcard for input and output ###

print("Importing Python modules...")

import pandas as pd
import os
import fileinput
import glob

print("Loading metadata and creating wildcards...")

metadata = config['metadata_file']

sample_df = pd.read_table(metadata, header=0)

sample_df['Path'] = None

for row in range(len(sample_df)):
    sample = sample_df.loc[row,'Sample_ID']
    run = sample_df.loc[row,'Run']
    path = str().join(run+'/'+sample)
    sample_df.loc[row,'Path'] = path

sample_df.to_csv(metadata, sep="\t", index=True)

SAMPLES = list(sample_df['Sample_ID'])
PATHS = list(sample_df['Path'])
RUNS = list(sample_df['Run'])

wildcard_constraints:
  PATHS=".*\/.*",
  SAMPLES = "[^\/]+",
  RUNS = "[^\/]+"

### Optional analyses ###

optional_outputs = list()

# Assembly option
if config['include_assembly'] == True:
  optional_outputs.extend(["results/qc_reports/assembly_stat_report.tsv"])

# Host removal option
if config['include_host_removal'] == True:
  optional_outputs.extend(["results/qc_reports/hostrm_qc_report.tsv"])

### Target rule ###

print("Running Hull Microbiome Cluster Workflow...")

rule all:
    input:
        "results/qc_reports/pre_qc_report.tsv",
        "results/qc_reports/post_qc_report.tsv",
        "results/biom/kraken2_allsamples.tsv",
        expand("results/biom/{path}_kraken2.tsv", path=PATHS),
        optional_outputs = optional_outputs,

### Remaining rules for workflow ###

# 1. Filter based on size and quality
include: "rules/fastp.smk"

# 2. Filter out host sequences
if config['include_host_removal'] == True:

  include: "rules/removing_host_seq.smk"

  print("Host contamination removal will be performed using minimap2 and samtools\n")
else:
  print("Host sequences will not be removed\n")

# 3. Assign taxonomy
include: "rules/kraken2.smk"

# 4. Convert to and from biom
include: "rules/biom_all_samples.smk" # convert kraken2 results to tabular format for R for all samples
include: "rules/biom_individual.smk" # convert kraken2 results to tabular format for R for individual samples

# 5. Read assembly and assessment

if config['include_assembly'] == True:

    include: "rules/metaflye.smk"

    print("Read assembly will be performed by metaFlye\n")
else:
    print("metaFlye for read assembly will not be included\n")

# 6. Report creation
report: "rules/report/workflow.rst"
